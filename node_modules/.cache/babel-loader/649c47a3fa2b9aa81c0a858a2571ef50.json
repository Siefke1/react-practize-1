{"ast":null,"code":"var _jsxFileName = \"/Users/leon/Desktop/code/practice/react/01-starting-setup/src/components/Expenses/Expenses.js\",\n    _s = $RefreshSig$();\n\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport React, { useState } from \"react\";\nimport ExpensesList from \"./ExpensesList\";\nimport Card from \"../UI/Card\";\nimport Chart from \"../Chart/Chart\";\nimport \"./Expenses.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Expenses = props => {\n  _s();\n\n  const [selectedFilter, setSelectedFilter] = useState('2020'); // Reveiving the selected year from ExpensesFilter.js\n\n  const selectYearHandler = selectedYear => {\n    setSelectedFilter(selectedYear);\n  }; // filtering expenses array against selectedFilter\n\n\n  const filteredExpenses = props.expenses.filter(expense => {\n    return expense.date.getFullYear().toString() === selectedFilter;\n  }); // // store rendered content in variable\n  // let expensesContent = <p>No Expenses found.</p>\n  // // update content on condition\n  // if (filteredExpenses.length > 0) {\n  //     expensesContent = filteredExpenses.map((expense => (\n  //         <ExpenseItem\n  //             key={expense.id}\n  //             title={expense.title}\n  //             amount={expense.amount}\n  //             date={expense.date}>\n  //         </ExpenseItem>\n  //     )\n  //     ))\n  // }\n  // // Chart dataPoints\n\n  const chartDataPoints = [{\n    label: 'Jan',\n    value: 0\n  }, {\n    label: 'Feb',\n    value: 0\n  }, {\n    label: 'Mar',\n    value: 0\n  }, {\n    label: 'Apr',\n    value: 0\n  }, {\n    label: 'May',\n    value: 0\n  }, {\n    label: 'Jun',\n    value: 0\n  }, {\n    label: 'Jul',\n    value: 0\n  }, {\n    label: 'Aug',\n    value: 0\n  }, {\n    label: 'Sep',\n    value: 0\n  }, {\n    label: 'Oct',\n    value: 0\n  }, {\n    label: 'Nov',\n    value: 0\n  }, {\n    label: 'Dec',\n    value: 0\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n        onSelectYear: selectYearHandler,\n        selected: selectedFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        dataPoints: chartDataPoints\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ExpensesList, {\n        items: filteredExpenses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Expenses, \"5QVYxzb8/XPd8Z26oSLEB0pUnhg=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"names":["ExpensesFilter","React","useState","ExpensesList","Card","Chart","Expenses","props","selectedFilter","setSelectedFilter","selectYearHandler","selectedYear","filteredExpenses","expenses","filter","expense","date","getFullYear","toString","chartDataPoints","label","value"],"sources":["/Users/leon/Desktop/code/practice/react/01-starting-setup/src/components/Expenses/Expenses.js"],"sourcesContent":["import ExpensesFilter from \"./ExpensesFilter\";\nimport React, { useState } from \"react\";\nimport ExpensesList from \"./ExpensesList\";\nimport Card from \"../UI/Card\";\nimport Chart from \"../Chart/Chart\"\nimport \"./Expenses.css\";\n\n\nconst Expenses = (props) => {\n    const [selectedFilter, setSelectedFilter] = useState('2020');\n\n    // Reveiving the selected year from ExpensesFilter.js\n    const selectYearHandler = (selectedYear) => {\n        setSelectedFilter(selectedYear)\n    }\n\n    // filtering expenses array against selectedFilter\n    const filteredExpenses = props.expenses.filter((expense => {\n        return expense.date.getFullYear().toString() === selectedFilter\n    }))\n\n    // // store rendered content in variable\n    // let expensesContent = <p>No Expenses found.</p>\n\n    // // update content on condition\n    // if (filteredExpenses.length > 0) {\n    //     expensesContent = filteredExpenses.map((expense => (\n    //         <ExpenseItem\n    //             key={expense.id}\n    //             title={expense.title}\n    //             amount={expense.amount}\n    //             date={expense.date}>\n    //         </ExpenseItem>\n    //     )\n    //     ))\n    // }\n\n    // // Chart dataPoints\n    const chartDataPoints = [\n        {label: 'Jan', value: 0},\n        {label: 'Feb', value: 0},\n        {label: 'Mar', value: 0},\n        {label: 'Apr', value: 0},\n        {label: 'May', value: 0},\n        {label: 'Jun', value: 0},\n        {label: 'Jul', value: 0},\n        {label: 'Aug', value: 0},\n        {label: 'Sep', value: 0},\n        {label: 'Oct', value: 0},\n        {label: 'Nov', value: 0},\n        {label: 'Dec', value: 0}\n    ]\n\n    return (\n        <div>\n            <Card className='expenses'>\n                {/*  passing the data transfer method to ExpensesFilter.js */}\n                <ExpensesFilter\n                    onSelectYear={selectYearHandler}\n                    selected={selectedFilter}\n                />\n                <Chart \n                    dataPoints={chartDataPoints}\n                />\n                <ExpensesList items={filteredExpenses} />\n                {/* render variable rather than content */}\n                {/* { expensesContent } */}\n\n                {/* Rendering item based on condition, ternary operator variant */}\n\n                {/* {filteredExpenses.length === 0 ? (\n                    <p>No Expenses found.</p>\n                ) : (\n                    filteredExpenses.map((expense => (\n                        <ExpenseItem\n                            key={expense.id}\n                            title={expense.title}\n                            amount={expense.amount}\n                            date={expense.date}>\n                        </ExpenseItem>\n                    )\n                    )))} */}\n            </Card>\n        </div>\n    )\n}\n\nexport default Expenses;"],"mappings":";;;AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAO,gBAAP;;;AAGA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EAAA;;EACxB,MAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC,MAAD,CAApD,CADwB,CAGxB;;EACA,MAAMQ,iBAAiB,GAAIC,YAAD,IAAkB;IACxCF,iBAAiB,CAACE,YAAD,CAAjB;EACH,CAFD,CAJwB,CAQxB;;;EACA,MAAMC,gBAAgB,GAAGL,KAAK,CAACM,QAAN,CAAeC,MAAf,CAAuBC,OAAO,IAAI;IACvD,OAAOA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,OAA0CV,cAAjD;EACH,CAFwB,CAAzB,CATwB,CAaxB;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;EACA,MAAMW,eAAe,GAAG,CACpB;IAACC,KAAK,EAAE,KAAR;IAAeC,KAAK,EAAE;EAAtB,CADoB,EAEpB;IAACD,KAAK,EAAE,KAAR;IAAeC,KAAK,EAAE;EAAtB,CAFoB,EAGpB;IAACD,KAAK,EAAE,KAAR;IAAeC,KAAK,EAAE;EAAtB,CAHoB,EAIpB;IAACD,KAAK,EAAE,KAAR;IAAeC,KAAK,EAAE;EAAtB,CAJoB,EAKpB;IAACD,KAAK,EAAE,KAAR;IAAeC,KAAK,EAAE;EAAtB,CALoB,EAMpB;IAACD,KAAK,EAAE,KAAR;IAAeC,KAAK,EAAE;EAAtB,CANoB,EAOpB;IAACD,KAAK,EAAE,KAAR;IAAeC,KAAK,EAAE;EAAtB,CAPoB,EAQpB;IAACD,KAAK,EAAE,KAAR;IAAeC,KAAK,EAAE;EAAtB,CARoB,EASpB;IAACD,KAAK,EAAE,KAAR;IAAeC,KAAK,EAAE;EAAtB,CAToB,EAUpB;IAACD,KAAK,EAAE,KAAR;IAAeC,KAAK,EAAE;EAAtB,CAVoB,EAWpB;IAACD,KAAK,EAAE,KAAR;IAAeC,KAAK,EAAE;EAAtB,CAXoB,EAYpB;IAACD,KAAK,EAAE,KAAR;IAAeC,KAAK,EAAE;EAAtB,CAZoB,CAAxB;EAeA,oBACI;IAAA,uBACI,QAAC,IAAD;MAAM,SAAS,EAAC,UAAhB;MAAA,wBAEI,QAAC,cAAD;QACI,YAAY,EAAEX,iBADlB;QAEI,QAAQ,EAAEF;MAFd;QAAA;QAAA;QAAA;MAAA,QAFJ,eAMI,QAAC,KAAD;QACI,UAAU,EAAEW;MADhB;QAAA;QAAA;QAAA;MAAA,QANJ,eASI,QAAC,YAAD;QAAc,KAAK,EAAEP;MAArB;QAAA;QAAA;QAAA;MAAA,QATJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAgCH,CA7ED;;GAAMN,Q;;KAAAA,Q;AA+EN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}