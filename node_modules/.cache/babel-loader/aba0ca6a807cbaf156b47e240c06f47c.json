{"ast":null,"code":"var _jsxFileName = \"/Users/leon/Desktop/code/practice/react/01-starting-setup/src/components/Expenses/Expenses.js\",\n    _s = $RefreshSig$();\n\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport React, { useState } from \"react\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport Card from \"../UI/Card\";\nimport \"./Expenses.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Expenses = props => {\n  _s();\n\n  const [selectedFilter, setSelectedFilter] = useState('2020'); // Reveiving the selected year from ExpensesFilter.js\n\n  const selectYearHandler = selectedYear => {\n    setSelectedFilter(selectedYear);\n  }; // filtering expenses array against selectedFilter\n\n\n  const filteredExpenses = props.expenses.filter(expense => {\n    return expense.date.getFullYear().toString() === selectedFilter;\n  }); // store rendered content in variable\n\n  let expensesContent = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No Expenses found.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 27\n  }, this); // update content on condition\n\n\n  if (filteredExpenses.length > 0) {\n    expensesContent = filteredExpenses.map(expense => /*#__PURE__*/_jsxDEV(ExpenseItem, {\n      title: expense.title,\n      amount: expense.amount,\n      date: expense.date\n    }, expense.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n        onSelectYear: selectYearHandler,\n        selected: selectedFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), expensesContent]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Expenses, \"5QVYxzb8/XPd8Z26oSLEB0pUnhg=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"names":["ExpensesFilter","React","useState","ExpenseItem","Card","Expenses","props","selectedFilter","setSelectedFilter","selectYearHandler","selectedYear","filteredExpenses","expenses","filter","expense","date","getFullYear","toString","expensesContent","length","map","title","amount","id"],"sources":["/Users/leon/Desktop/code/practice/react/01-starting-setup/src/components/Expenses/Expenses.js"],"sourcesContent":["import ExpensesFilter from \"./ExpensesFilter\";\nimport React, { useState } from \"react\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport Card from \"../UI/Card\";\nimport \"./Expenses.css\";\n\n\nconst Expenses = (props) => {\n    const [selectedFilter, setSelectedFilter] = useState('2020');\n\n    // Reveiving the selected year from ExpensesFilter.js\n    const selectYearHandler = (selectedYear) => {\n        setSelectedFilter(selectedYear)\n    }\n\n    // filtering expenses array against selectedFilter\n    const filteredExpenses = props.expenses.filter((expense => {\n        return expense.date.getFullYear().toString() === selectedFilter\n    }))\n\n    // store rendered content in variable\n    let expensesContent = <p>No Expenses found.</p>\n\n    // update content on condition\n    if (filteredExpenses.length > 0) {\n        expensesContent = filteredExpenses.map((expense => (\n            <ExpenseItem\n                key={expense.id}\n                title={expense.title}\n                amount={expense.amount}\n                date={expense.date}>\n            </ExpenseItem>\n        )\n        ))\n    }\n\n    return (\n        <div>\n            <Card className='expenses'>\n                {/*  passing the data transfer method to ExpensesFilter.js */}\n                <ExpensesFilter\n                    onSelectYear={selectYearHandler}\n                    selected={selectedFilter}\n                />\n\n                { expensesContent }\n\n                {/* Rendering item based in condition, ternary operator variant */}\n\n                {/* {filteredExpenses.length === 0 ? (\n                    <p>No Expenses found.</p>\n                ) : (\n                    filteredExpenses.map((expense => (\n                        <ExpenseItem\n                            key={expense.id}\n                            title={expense.title}\n                            amount={expense.amount}\n                            date={expense.date}>\n                        </ExpenseItem>\n                    )\n                    )))} */}\n            </Card>\n        </div>\n    )\n}\n\nexport default Expenses;"],"mappings":";;;AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,gBAAP;;;AAGA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EAAA;;EACxB,MAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,MAAD,CAApD,CADwB,CAGxB;;EACA,MAAMO,iBAAiB,GAAIC,YAAD,IAAkB;IACxCF,iBAAiB,CAACE,YAAD,CAAjB;EACH,CAFD,CAJwB,CAQxB;;;EACA,MAAMC,gBAAgB,GAAGL,KAAK,CAACM,QAAN,CAAeC,MAAf,CAAuBC,OAAO,IAAI;IACvD,OAAOA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,OAA0CV,cAAjD;EACH,CAFwB,CAAzB,CATwB,CAaxB;;EACA,IAAIW,eAAe,gBAAG;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAtB,CAdwB,CAgBxB;;;EACA,IAAIP,gBAAgB,CAACQ,MAAjB,GAA0B,CAA9B,EAAiC;IAC7BD,eAAe,GAAGP,gBAAgB,CAACS,GAAjB,CAAsBN,OAAO,iBAC3C,QAAC,WAAD;MAEI,KAAK,EAAEA,OAAO,CAACO,KAFnB;MAGI,MAAM,EAAEP,OAAO,CAACQ,MAHpB;MAII,IAAI,EAAER,OAAO,CAACC;IAJlB,GACSD,OAAO,CAACS,EADjB;MAAA;MAAA;MAAA;IAAA,QADc,CAAlB;EASH;;EAED,oBACI;IAAA,uBACI,QAAC,IAAD;MAAM,SAAS,EAAC,UAAhB;MAAA,wBAEI,QAAC,cAAD;QACI,YAAY,EAAEd,iBADlB;QAEI,QAAQ,EAAEF;MAFd;QAAA;QAAA;QAAA;MAAA,QAFJ,EAOMW,eAPN;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AA4BH,CAzDD;;GAAMb,Q;;KAAAA,Q;AA2DN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}